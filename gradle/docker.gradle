import java.util.regex.Pattern

/**
 * Docker build
 */

repositories {
    maven {
        url 'http://repo.jenkins-ci.org/public'
    }
}

// Getting the DSL Core library

configurations {
    dslCore
}

dependencies {
    dslCore(group: 'org.jenkins-ci.plugins', name: 'job-dsl-core', version: jobDslVersion, classifier: 'standalone') {
        transitive = false
    }
}

task dockerClean(type: Delete) {
    delete "src/main/docker/job-dsl-core-standalone.jar"
    delete "src/main/docker/seed.hpi"
}

clean.dependsOn dockerClean

task prepareDslLib(type: Copy) {
    from configurations.dslCore
    into "${projectDir}/src/main/docker/"
    rename { String fileName -> 'job-dsl-core-standalone.jar' }
}

// Getting the Seed plug-in

task prepareSeedHpi(type: Copy, dependsOn: jpi) {
    from jpi.archivePath
    into 'src/main/docker'
}

// Image build

task buildImage(type: Exec, dependsOn: [prepareDslLib, prepareSeedHpi]) {
    executable 'docker'
    args = [
            'build',
            '--tag',
            "nemerosa/seed:${versioning.info.full}",
            "${projectDir}/src/main/docker"
    ]
}

task buildLatest(type: Exec, dependsOn: buildImage) {
    executable 'docker'
    args = [
            'tag',
            '--force',
            "nemerosa/seed:${versioning.info.full}",
            'nemerosa/seed:latest'
    ]
}

task build(dependsOn: [versionDisplay, buildImage, buildLatest])

if (versioning.info.branchType == 'release') {
    task buildRelease(type: Exec, dependsOn: buildImage) {
        executable 'docker'
        args = [
                'tag',
                '--force',
                "nemerosa/seed:${versioning.info.full}",
                "nemerosa/seed:${versioning.info.display}"
        ]
    }

    build.dependsOn buildRelease
}

// Link with the build

buildImage.dependsOn test
build.dependsOn([buildImage, buildLatest])

// Docker Jenkins acceptance tests

ext {
    // Parameters
    getParameter = { String key, String defaultValue ->
        if (project.hasProperty(key)) {
            project.properties[key]
        } else {
            defaultValue
        }
    }
    // Default integration test configuration
    jenkinsScheme = getParameter('jenkinsScheme', 'http')
    jenkinsHost = getParameter('jenkinsHost', 'localhost')
    jenkinsPort = getParameter('jenkinsPort', '8080') as int
}

task dockerAcceptanceTest(type: Test) {
    doFirst {
        def jenkinsUrl = "${jenkinsScheme}://${jenkinsHost}:${jenkinsPort}"
        println "Docker tests against: ${jenkinsUrl}"
        systemProperty 'jenkinsUrl', jenkinsUrl
    }
    include 'net/nemerosa/seed/jenkins/acceptance/**'
}

// Exclude the Docker tests from the default tests
test {
    exclude 'net/nemerosa/seed/jenkins/docker/**'
}

// Docker deployment

ext {
    getPublishedPort = { String cid, int port ->
        new ByteArrayOutputStream().withStream { os ->
            exec {
                executable = 'docker'
                args = ['port', cid, port]
                standardOutput = os
            }
            def output = os.toString().trim()
            def m = Pattern.compile(/^.*:(\d+)$/).matcher(output)
            if (m.matches()) {
                m.group(1) as int
            } else {
                throw new GradleException("Cannot parse port from ${output}")
            }

        }
    }
}

task dockerDeploy(type: Exec) {
    executable 'docker'
    args = [
            'run',
            '--detach',
            '--publish-all=true',
            // List of tests file to mount
            "--volume=${projectDir}/src/test/resources/docker:/var/test/resources",
            // Image to deploy
            "nemerosa/seed:latest"
    ]
    standardOutput = new ByteArrayOutputStream()
    ext.cid = {
        standardOutput.toString().trim()
    }
    doLast {
        def cid = ext.cid()
        int port = getPublishedPort(cid, 8080)
        println "Deploying container ${cid} on port ${port}"
        project.ext.jenkinsPort = port
    }
}

// Use the -x dockerUndeploy flag to keep the container at the end of the tests
task dockerUndeploy(dependsOn: dockerDeploy) << {
    def cid = dockerDeploy.ext.cid()
    println "Undeploying container ${cid}"
    exec {
        executable = 'docker'
        args = ['rm', '--force', cid]
    }
}

// Git test repositories

ext {
    dockerSsh = { String command ->
        def cid = project.tasks.dockerDeploy.cid()
        exec {
            executable = 'docker'
            args = [ 'exec', cid, '/bin/bash', '-c', command ]
        }
    }
    dockerAsyncSsh = { String command ->
        def cid = project.tasks.dockerDeploy.cid()
        exec {
            executable = 'docker'
            args = [ 'exec', '--detach', cid, '/bin/bash', '-c', command ]
        }
    }
    dockerScript = { String dir, String script ->
        dockerSsh "mkdir -p ${dir}"
        script.readLines().findAll { it.trim() } .each { String command ->
            dockerSsh "cd ${dir} && ${command.trim()}"
        }
    }
    dockerGitRepo = { String name, String script ->
        dockerScript "/var/lib/jenkins/tests/git/${name}", script
    }
}

task dockerSvnTestRepo {
    doFirst {
        def svnrepo = "/var/lib/jenkins/tests/svn"
        dockerScript svnrepo, '''\
rm -rf *
svnadmin create .
cp -r /var/test/resources/svn/* conf
'''
        dockerAsyncSsh "svnserve --daemon --root ${svnrepo} --pid-file ${svnrepo}/svn.pid"
    }
}

task dockerGitTestRepoSeedStd {
    doFirst {
        dockerGitRepo 'seed-std', '''\
git init
git config user.email "acceptance-test@nemerosa.com"
git config user.name "Acceptance Test"
mkdir seed
cp /var/test/resources/seed-std.groovy seed/seed.groovy
git add seed/seed.groovy
git commit -m "Seed file"
        '''
    }
}

task dockerGitTestRepos(dependsOn: [dockerGitTestRepoSeedStd])

// Local Docker acceptance tests orchestration

task localDockerAcceptanceTest {
    dependsOn buildLatest
    dependsOn dockerAcceptanceTest
    dependsOn dockerDeploy
    dependsOn dockerGitTestRepos
    dependsOn dockerSvnTestRepo
    finalizedBy dockerUndeploy
}

dockerAcceptanceTest.mustRunAfter dockerDeploy
dockerAcceptanceTest.mustRunAfter dockerGitTestRepos
dockerAcceptanceTest.mustRunAfter dockerSvnTestRepo
dockerGitTestRepos.mustRunAfter dockerDeploy
dockerSvnTestRepo.mustRunAfter dockerDeploy
