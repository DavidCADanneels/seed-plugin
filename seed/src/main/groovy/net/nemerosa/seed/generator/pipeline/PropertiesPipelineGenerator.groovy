package net.nemerosa.seed.generator.pipeline

import net.nemerosa.seed.config.SeedProjectEnvironment

/**
 * Pipeline generator based on properties found in the <code>seed/seed.properties</code> file.
 *
 * The path to the property file can be configured using the <code>pipeline-generator-property-path</code>
 * configuration property.
 */
class PropertiesPipelineGenerator extends AbstractPipelineGenerator {

    static final String PIPELINE_GENERATOR_PROPERTY_PATH = 'pipeline-generator-property-path'

    @Override
    String generate(SeedProjectEnvironment environment, String branch) {

        List<String> snippets = []

        // Gets the property file name
        String propertyPath = environment.getConfigurationValue(PIPELINE_GENERATOR_PROPERTY_PATH, 'seed/seed.properties')

        // TODO Extensions (injection of DSL steps)

        /**
         * Reads information from the property file and generates a Gradle build file
         * for the purpose of download the DSL libraries and extracting the bootstrap
         * script file.
         */
        snippets << """\
configure { node ->
    node / 'builders' / 'net.nemerosa.seed.generator.pipeline.PropertiesPipelineGeneratorBuilder' {
        'project' '${environment.id}'
        'projectClass' '${environment.projectClass}'
        'projectScmType' '${environment.scmType}'
        'projectScmUrl' '${environment.scmUrl}'
        'branch' '${branch}'
        'propertyPath' '${propertyPath}'
    }
}
"""

        /**
         * Defines a Gradle step for the build file generated by the previous step:
         * - downloads the dependencies
         * - extract the DSL bootstrap script from the indicated JAR
         */
        snippets << """\
steps {
    gradle {
        buildFile 'seed/build.gradle'
        fromRootBuildScriptDir()
        makeExecutable()
        useWrapper()
        tasks 'prepare'
    }
}
"""

        /**
         * Runs the script DSL
         *
         * TODO Remove action to be configured?
         */
        // TODO JENKINS-28171 Add lookupStrategy
//        snippets << """\
//steps {
//    dsl {
//        removeAction 'DELETE' // Deletes unmanaged jobs
//        external 'seed/lib/\${${PropertiesPipelineGeneratorBuilder.SEED_DSL_SCRIPT_LOCATION}}'
//        ignoreExisting false  // We want existing jobs to be updated
//        additionalClasspath 'seed/lib/*.jar'
//        lookupStrategy 'SEED_JOB'
//    }
//}
//"""
        snippets << """\
configure { node ->
    node / 'builders' / 'javaposse.jobdsl.plugin.ExecuteDslScripts' {
        targets 'seed/lib/\${${PropertiesPipelineGeneratorBuilder.SEED_DSL_SCRIPT_LOCATION}}'
        usingScriptText false
        scriptText ''
        ignoreExisting false
        removedJobAction 'DELETE'
        lookupStrategy 'SEED_JOB'
        additionalClasspath 'seed/lib/*.jar'
    }
}
"""

        // OK
        return snippets.join('\n')
    }

}
